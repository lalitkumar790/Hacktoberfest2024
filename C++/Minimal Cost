/* Problem Statement :There is an array arr of heights of stone and Geek is standing at the first stone and can jump to one of the following: 
Stone i+1, i+2, ... i+k stone, where k is the maximum number of steps that can be jumped and cost will be |hi-hj| is incurred,
where j is the stone to land on. Find the minimum possible total cost incurred before the Geek reaches the last stone.*/

#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

int minimizeCost(int k, vector<int>& arr) {
    int n = arr.size();
    vector<int> dp(n, 0); // dp array to store the minimum cost to reach each stone

    dp[0] = 0; // base case: cost to reach the first stone is zero
    
    // Iterate over all stones starting from the second one
    for (int i = 1; i < n; i++) {
        dp[i] = INT_MAX; // Initialize the cost to reach this stone as a large value
        // Try all possible jumps from i-1, i-2, ..., i-k (but not less than 0)
        for (int j = 1; j <= k && i - j >= 0; j++) {
            dp[i] = min(dp[i], dp[i - j] + abs(arr[i] - arr[i - j]));
        }
    }

    return dp[n - 1]; // The minimum cost to reach the last stone
}
